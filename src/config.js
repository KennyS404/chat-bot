import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Configurar o dotenv para carregar o arquivo .env da raiz do projeto
dotenv.config({ path: join(__dirname, '..', '.env') });

export const config = {
  openai: {
    apiKey: process.env.OPENAI_API_KEY,
    whisperModel: process.env.WHISPER_MODEL || 'whisper-1',
    gptModel: process.env.GPT_MODEL || 'gpt-3.5-turbo',
    ttsModel: process.env.TTS_MODEL || 'tts-1',
    ttsVoice: process.env.TTS_VOICE || 'nova',
  },
  deepseek: {
    apiKey: process.env.DEEPSEEK_API_KEY,
    model: process.env.DEEPSEEK_MODEL || 'deepseek-chat',
    baseURL: 'https://api.deepseek.com/v1'
  },
  ai: {
    // Configura√ß√£o do modo de opera√ß√£o
    mode: process.env.AI_MODE || 'hybrid', // 'openai', 'deepseek', 'hybrid'
    fallbackToOpenAI: process.env.FALLBACK_TO_OPENAI !== 'false',
  },
  whatsapp: {
    sessionName: process.env.SESSION_NAME || 'whatsapp-bot',
    authDir: join(__dirname, '..', 'auth_info_baileys'),
  },
  supabase: {
    url: process.env.SUPABASE_URL,
    key: process.env.SUPABASE_KEY,
    storage: {
      bucket: 'audio-messages',
      maxFileSize: 10 * 1024 * 1024, // 10MB
      allowedMimeTypes: ['audio/ogg', 'audio/mpeg', 'audio/wav'],
      compression: {
        enabled: true,
        maxSize: 1024 * 1024, // 1MB
        quality: 0.8
      }
    },
    database: {
      maxConnections: 10,
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 2000
    }
  },
  app: {
    tempDir: process.env.TEMP_DIR || join(__dirname, '..', 'temp'),
    maxAudioDuration: parseInt(process.env.MAX_AUDIO_DURATION || '120'),
    logLevel: process.env.LOG_LEVEL || 'info',
    enableAudioResponse: process.env.ENABLE_AUDIO_RESPONSE !== 'false',
  },
  messages: {
    welcome: 'Ol√°! Sou um chatbot baseado em intelig√™ncia artificial, desenvolvido pelo Departamento de Engenharia de Computa√ß√£o da Unoesc Chapec√≥. Meu objetivo √© facilitar a comunica√ß√£o por meio de √°udios e auxiliar na pron√∫ncia de diversos idiomas.',
    processing: 'üéß Processando seu √°udio...',
    error: '‚ùå Desculpe, ocorreu um erro ao processar seu √°udio. Por favor, tente novamente.',
    audioTooLong: '‚è±Ô∏è O √°udio √© muito longo. Por favor, envie √°udios de at√© 2 minutos.',
    notAudio: 'üéµ Por favor, envie apenas mensagens de √°udio.',
  }
};

// Valida√ß√£o de configura√ß√£o
if (!config.openai.apiKey || config.openai.apiKey === 'YOUR_OPENAI_API_KEY_HERE') {
  console.error('‚ùå OPENAI_API_KEY n√£o configurada! Configure no arquivo .env');
  process.exit(1);
}

// Valida√ß√£o condicional do DeepSeek
if (config.ai.mode === 'deepseek' || config.ai.mode === 'hybrid') {
  if (!config.deepseek.apiKey || config.deepseek.apiKey === 'YOUR_DEEPSEEK_API_KEY_HERE') {
    if (config.ai.mode === 'deepseek') {
      console.error('‚ùå DEEPSEEK_API_KEY n√£o configurada! Configure no arquivo .env');
      process.exit(1);
    } else {
      console.warn('‚ö†Ô∏è DEEPSEEK_API_KEY n√£o configurada. Usando apenas OpenAI.');
      config.ai.mode = 'openai';
    }
  }
} 